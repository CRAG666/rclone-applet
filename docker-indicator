#!/usr/bin/env python3
from sys import argv
import signal
import gi
import subprocess
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')
from gi.repository import Gtk, AppIndicator3, Notify


class docker():
    def __init__(self):
        app, iconpath = 'docker', "docker"
        self.menuitems = []
        self.docker_applet = AppIndicator3.Indicator.new(
            app, iconpath,
            AppIndicator3.IndicatorCategory.OTHER)
        self.docker_applet.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        self.docker_applet.set_menu(self.create_menu())
        self.menuitems[1].set_sensitive(False)

    def create_menu(self):
        menu = Gtk.Menu()
        options = ['On', 'Of']
        for i in options:
            items = Gtk.MenuItem(label=i)
            items.connect('activate', self.options)
            self.menuitems.append(items)
            menu.append(items)
        menu_quit = Gtk.MenuItem(label='Quit')
        menu_quit.connect('activate', self.stop)
        menu.append(menu_quit)
        menu.show_all()
        return menu

    def options(self, source):
        if source.get_label() == 'On':
            subprocess.run('systemctl start docker', shell=True)
            self.menuitems[0].set_sensitive(False)
            self.menuitems[1].set_sensitive(True)
            self.messages("Docker", "is running")
            self.docker_applet.set_icon_full('docker-active', 'Docker is active')
        else:
            subprocess.run('systemctl stop docker', shell=True)
            self.menuitems[0].set_sensitive(True)
            self.menuitems[1].set_sensitive(False)
            self.messages("Docker", "is Of")
            self.docker_applet.set_icon_full('docker', 'Docker is inactive')

    def messages(self, title, message):
        '''
        Show a notification using libnotify/gobject

        Positional arguments:
        title - notification title
        message - notification message

        Raises:
        RuntimeError - failed to show the notification

        Note:
        This function is designed to be called a few times in a row so
        make sure to call Notify.uninit() afterwards
        '''
        if Notify.is_initted() is False:
            Notify.init('docker')

        if Notify.is_initted() is False:
            raise RuntimeError('Failed to init notify')

        notif = Notify.Notification.new(title, message)

        if not notif.show():
            raise RuntimeError('Failed to show a notification')

    def init(self):
        Gtk.main()

    def stop(self, source):
        Gtk.main_quit()


app = docker()
signal.signal(signal.SIGINT, signal.SIG_DFL)
app.init()
